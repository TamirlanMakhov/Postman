{
	"info": {
		"_postman_id": "77a1acf5-6f65-4b6c-9028-f94b9b8c733a",
		"name": "Homework",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20573549"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1 задание: проверить, что статус код 200 и приходит строка в body",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Second",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							"let resp = pm.response.json();",
							"",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Name is correct\", function () {",
							"    pm.expect(resp.name).to.eql(\"Tamirlan\");",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Age is correct\", function () {",
							"    pm.expect(resp.age).to.eql('24');",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Salary is correct\", function () {",
							"    pm.expect(resp.salary).to.eql(100000);",
							"});",
							"",
							"// спарсить request",
							"let req = request.data;",
							"",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name is correct\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Age is correct\", function () {",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Salary is correct\", function () {",
							"    pm.expect(resp.salary).to.eql(+req.salary);",
							"}); ",
							"",
							"// Вывести в консоль параметр family из response.",
							"console.log(resp.family)",
							"",
							"",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Salary after 1.5\", function () {",
							"    pm.expect(resp.family.u_salary_1_5_year).to.eql(+req.salary*4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "24",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tamirlan",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Third",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// стаус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json",
							"let resp = pm.response.json();",
							"",
							"// Спарсить request",
							"let req = pm.request.url.query.toObject()",
							"",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name is correct\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"age is correct\", function () {",
							"    pm.expect(resp.age).to.eql(req.age);",
							"});",
							"",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary is correct\", function () {",
							"    pm.expect(resp.salary).to.eql(+req.salary);",
							"});",
							"",
							"// Вывести в консоль параметр family из response.",
							"console.log(resp.family)",
							"",
							"// Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"dog exists\", function () {",
							"    pm.expect(resp.family.pets.dog).to.have.any.keys('name');",
							"});",
							"",
							"// Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog has age\", function () {",
							"    pm.expect(resp.family.pets.dog).to.have.any.keys('age');",
							"});",
							"",
							"//  Проверить, что параметр name имеет значение Luky",
							"pm.test(\"dog is Luky\", function () {",
							"    pm.expect(resp.family.pets.dog.name).to.eql('Luky');",
							"});",
							"",
							"// Проверить, что параметр age имеет значение 4.",
							"pm.test(\"dog is 4 years old\", function () {",
							"    pm.expect(resp.family.pets.dog.age).to.eql(+4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?age=24&salary=100000&name=Tamirlan",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "100000"
						},
						{
							"key": "name",
							"value": "Tamirlan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fourth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Спарсить response body в json.",
							"let resp = pm.response.json();",
							"",
							"// Спарсить request.",
							"let req = pm.request.url.query.toObject()",
							"",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name is correct\", function () {",
							"    pm.expect(resp.name).to.eql(req.name);",
							"});",
							"",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"age is correct\", function () {",
							"    pm.expect(resp.age).to.eql(+req.age);",
							"});",
							"",
							"",
							"// Вывести в консоль параметр salary из request.",
							"console.log(req.salary)",
							"",
							"// Вывести в консоль параметр salary из response.",
							"console.log(resp.salary)",
							"",
							"// Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(resp.salary[0])",
							"",
							"// Вывести в консоль 0-й элемент параметра salary из response",
							"console.log(resp.salary[1])",
							"",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(resp.salary[2])",
							"",
							" //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salaries are equal\", function () {",
							"    pm.expect(+resp.salary[0]).to.eql(+req.salary);",
							"});",
							"",
							"//  Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salaries are equal\", function () {",
							"    pm.expect(+resp.salary[1]).to.eql(+req.salary*2);",
							"});",
							"",
							"//  Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"salaries are equal\", function () {",
							"    pm.expect(+resp.salary[2]).to.eql(+req.salary*3);",
							"});",
							"",
							"// Создать в окружении переменную name, age, salary",
							"// - done ",
							"",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let i=0; i < resp.salary.length; i++) {",
							"    console.log(+resp.salary[i]);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=24&salary=100000&name=Tamirlan",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "100000"
						},
						{
							"key": "name",
							"value": "Tamirlan"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "FIfth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ставить параметр salary, age, name из окружения в request",
							"// done",
							"",
							"// статус 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// спарсить response body",
							"let resp = pm.response.json();",
							"",
							"// спарсить request",
							"let req = request.data;",
							"",
							"// Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Start qa salary exists\", function () {",
							"    pm.expect(resp).to.have.property('start_qa_salary');",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Qa salary after 6 months exists\", function () {",
							"    pm.expect(resp).to.have.property('qa_salary_after_6_months');",
							"});",
							"",
							"//  Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Qa salary after 12 months exists\", function () {",
							"    pm.expect(resp).to.have.property('qa_salary_after_12_months');",
							"});",
							"",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Qa salary after 1.5 year exists\", function () {",
							"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"",
							"//  Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Qa salary after 3.5 years exists\", function () {",
							"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"",
							"// Проверить, что json response имеет параметр person",
							"pm.test(\"person exists\", function () {",
							"    pm.expect(resp).to.have.property('person');",
							"});",
							"",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start qa salary are equal\", function () {",
							"    pm.expect(resp.start_qa_salary).to.eql(+req.salary);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa salaries after 6 months are equal\", function () {",
							"    pm.expect(resp.qa_salary_after_6_months).to.eql(+req.salary*2);",
							"});",
							"",
							"//  Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa salaries after 12 months are equal\", function () {",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary*2.7);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa salaries after 1.5 year are equal\", function () {",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);",
							"});",
							"",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa salaries after 3.5 years are equal\", function () {",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);",
							"});",
							"",
							"",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"1 el of u_name is request salary\", function () {",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);",
							"});",
							"",
							"// Проверить, что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age is request age\", function () {",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);",
							"});",
							"",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"qa salaries after 5 years are equal\", function () {",
							"    pm.expect(resp.person['u_salary_5_years']).to.eql(+req.salary*4.2);",
							"});",
							"",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"for (let i=0; i < resp.person.u_name.length; i++) {",
							"    console.log(resp.person.u_name[i])",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}